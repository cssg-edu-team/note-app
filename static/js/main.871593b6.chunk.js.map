{"version":3,"sources":["components/header.js","components/footer.js","data/services/firebase_config.js","data/services/database.js","Note.js","App.js","data/markdown/app_background.js","index.js"],"names":["Header","className","to","Footer","Date","getFullYear","dotenv","config","firebase","apps","length","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","database","ref","methods","getAllNotes","setNotes","on","snapshot","dto","val","result","Object","keys","map","id","note","date","values","createNote","data","newNote","push","set","key","updateNote","child","update","removeNote","remove","removeAllNotes","Note","changeEditStatus","edit","currNoteId","saveNote","useState","currNote","setCurrNote","isCurrNote","Form","Group","controlId","FormControl","defaultValue","onChange","e","target","value","as","rows","InputGroup","Append","Button","onClick","toLocaleString","App","setEdit","notes","setCurrNoteId","getTime","savedNote","useEffect","source","Index","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.871593b6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => (\n  <header className=\"masthead\">\n    <div>\n      <div>\n        <Link to=\"/\">\n          <h1 className=\"site-title\">Chiazo's Notes</h1>\n        </Link>\n      </div>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <footer>Â© {new Date().getFullYear()} - Chiazo</footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import firebase from \"firebase\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DB_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nexport default firebase.database();\n","import firebase from \"./firebase_config\";\n\nconst db = firebase.ref(\"notes\");\n\nconst getAllNotes = (setNotes) => {\n  return db.on(\"value\", function (snapshot) {\n    const dto = snapshot.val();\n    if (!dto) {\n      setNotes([]);\n      return;\n    }\n    const result = Object.keys(dto).map((id) => ({\n      id,\n      note: dto[id].note,\n      date: dto[id].date,\n    }));\n    setNotes(Object.values(result));\n  });\n};\n\nconst createNote = (data) => {\n  const newNote = db.push();\n  newNote.set(data);\n  return newNote.key;\n};\n\nconst updateNote = (id, note, date) => {\n  return db.child(id).update({ note, date });\n};\n\nconst removeNote = (id) => {\n  return db.child(id).remove();\n};\n\nconst removeAllNotes = () => {\n  return db.remove();\n};\n\nconst methods = {\n  getAllNotes,\n  createNote,\n  updateNote,\n  removeNote,\n  removeAllNotes,\n};\n\nexport default methods;\n","import { useState } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Form from \"react-bootstrap/Form\";\n\nconst Note = ({\n  id,\n  note,\n  date,\n  changeEditStatus,\n  edit,\n  currNoteId,\n  saveNote,\n}) => {\n  const [currNote, setCurrNote] = useState(note);\n  const editNote = (e) => {\n    if (currNoteId !== id) {\n      changeEditStatus(id);\n    }\n    setCurrNote(e.target.value);\n  };\n\n  const save = () => {\n    saveNote(id, currNote);\n  };\n\n  const isCurrNote = currNoteId === id;\n\n  return (\n    <div className=\"col-3 note\" key={id}>\n      <Form>\n        <Form.Group controlId=\"form-input\">\n          <FormControl\n            defaultValue={note}\n            onChange={editNote}\n            as=\"textarea\"\n            rows={5}\n          />\n          <InputGroup.Append>\n            {edit && isCurrNote && (\n              <Button className=\"save-btn\" onClick={save}>\n                Save\n              </Button>\n            )}\n          </InputGroup.Append>\n        </Form.Group>\n      </Form>\n      <div className=\"date\">{date.toLocaleString()}</div>\n    </div>\n  );\n};\n\nexport default Note;\n","import { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { app_background } from \"./data/markdown\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport db from \"./data/services/database\";\nimport Note from \"./Note\";\n\nconst App = () => {\n  const [edit, setEdit] = useState(false);\n  const [notes, setNotes] = useState(null);\n  const [currNoteId, setCurrNoteId] = useState(0);\n\n  const changeEditStatus = (id) => {\n    setCurrNoteId(id);\n    if (id !== currNoteId) {\n      setEdit(!edit);\n    }\n  };\n\n  const saveNote = (id, note) => {\n    setEdit(!edit);\n    if (id) {\n      db.updateNote(id, note, new Date().getTime());\n    } else {\n      const date = new Date().getTime();\n      const savedNote = { note, date: date };\n      const key = db.createNote(savedNote);\n      if (notes) {\n        setNotes([...notes, { id: key, note: note, date }]);\n      } else {\n        setNotes([{ id: key, note: note, date }]);\n      }\n    }\n  };\n\n  const addNote = () => {\n    saveNote(null, \"\");\n  };\n\n  useEffect(() => {\n    if (!notes) {\n      // grab notes from firebase\n      db.getAllNotes(setNotes);\n    }\n  }, [notes]);\n\n  return (\n    <div className=\"home\">\n      <div id=\"content\">\n        <ReactMarkdown className=\"background\" source={app_background} />\n        <div className=\"container\">\n          <div className=\"row justify-content-md-center\">\n            {notes &&\n              notes.map(({ id, note, date }) => (\n                <Note\n                  key={id}\n                  id={id}\n                  note={note}\n                  currNoteId={currNoteId}\n                  date={new Date(date)}\n                  changeEditStatus={changeEditStatus}\n                  edit={edit}\n                  saveNote={saveNote}\n                />\n              ))}\n          </div>\n          <Button onClick={addNote}>Add note!</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const app_background = `##### A place for my thoughts!`;\n\nexport default app_background;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport { Header, Footer } from \"./components\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Index = () => (\n  <div className=\"main\">\n    <BrowserRouter>\n      <Header />\n      <div>\n        <Route path=\"/\" component={App} />\n      </div>\n      <Footer />\n    </BrowserRouter>\n  </div>\n);\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}